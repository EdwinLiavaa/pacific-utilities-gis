'*****************************************************************
'*  Name   : Calc_Network_Loss
'*  Purpose: Run Network Trace and calculate Technical Losses
'*				on the Transmission & Distribution Lines  
'*
'*				1. Select Feeder Then Hit either HV or LV
'*				2. Open relevant points tables  
'*				3. Trace Network
'*				4. Populate simulated HV and LV 
'*
'*  Author : Edwin Liava'a 21/01/2013
'*  Inputs : HV, LV, Feeders and Relevant points tables
'*  Outputs: Technical Losses
'*           
'*****************************************************************

Include "PPL_Lib.def"
Include "mapbasic.def"
Include "menu.def"
Include "Icons.def"  

'*****************************************************************

Global rs_path 					As String	 'MapInfo Raster Layers (BackDrops)
Global vt_Path 					As String	 'MapInfo Vector Layers
Global strFD_ID					As String
Global strTX_ID					As String
Global cKWH 			 			As Float
Global totalSPAN_LV 			As Float
Global totalSPAN_HV  			As Float
Global totaltxIronLosses  		As Integer  'Watts
Global totaltxCopperLosses  	As Integer	'Watts
Global totaltxAvgLTLosses  	As Integer	'Watts
Global totalNumTXs				As Integer
Declare sub Calc_Network_Loss
Declare Sub CutaLine
Declare Sub LineGridCut_LV(ByVal LineFrom as String, ByVal start as Logical, ByVal Cosname as String)
Declare Sub LineGridCut_HV(ByVal LineFrom as String, ByVal start as Logical, ByVal Cosname as String)

'*****************************************************************

Sub Calc_Network_Loss

	Dim TableName		As String
	Dim Map_Win_id 	As Integer
	Dim FeederID 		As String
	Dim VoltID 		As Float

	OnError goto Err_Manage
	
'************* close some toolbars *************

	Alter ButtonPad "Drawing" Hide
	Alter ButtonPad "Main" Show Fixed
	Alter ButtonPad "ODBC" Hide

'************* Creat Toolbox *************

	Create ButtonPad "PPL MIS/GIS" As	
			ToolButton
				Icon MI_ICON_CUT
				Cursor MI_CURSOR_CROSSHAIR
				DrawMode DM_CUSTOM_POINT
				ID 23	
				HelpMsg "Select a HV or LV Line"

				Calling CutaLine

			Title " "
			width 8
			Float
			Show


'************* close and open map layers *************
	
	Close All

	TableName = vt_Path + "\" + "LN_HV.tab"
	Open Table TableName As HV Interactive
	TableName = vt_Path + "\" + "LN_LV.tab"
	Open Table TableName As LV Interactive
	TableName = vt_Path + "\" + "TT.tab"
	Open Table TableName As Towers Interactive
	TableName = vt_Path + "\" + "TX.tab"
	Open Table TableName As Trans Interactive
	TableName = vt_Path + "\" + "MT.tab"
	Open Table TableName As Meters Interactive
	TableName = vt_path + "\" + "FD.tab"
	Open Table TableName As Feeders Interactive
	TableName = vt_path + "\" + "GN.tab"
	Open Table TableName As DGensets Interactive
	TableName = vt_path + "\" + "TH.tab"
	Open Table TableName As TGensets Interactive
	TableName = vt_path + "\" + "HY.tab"
	Open Table TableName As Hydros Interactive
	TableName = vt_path + "\" + "BU.tab"
	Open Table TableName As Busbars Interactive
	TableName = vt_path + "\" + "BR.tab"
	Open Table TableName As Breakers Interactive
	TableName = vt_path + "\" + "IS.tab"
	Open Table TableName As Isolators Interactive
	TableName = vt_path + "\" + "ES.tab"
	Open Table TableName As ESwitches Interactive
	TableName = vt_path + "\" + "LA.tab"
	Open Table TableName As LArresters Interactive
	TableName = vt_path + "\" + "ST.tab"
	Open Table TableName As Station Interactive
	TableName = vt_path + "\" + "BL.tab"
	Open Table TableName As Buildings Interactive
		
	Map From HV,LV,Towers,Trans,Meters,DGensets,TGensets,Hydros,Busbars,Breakers,Isolators,ESwitches,LArresters,Station,Buildings Max

'*************  Getting window ID *************

	Map_Win_Id = FrontWindow()
	If Map_Win_id = 0 Then
		Exit Sub
	End If

'*************************** Dialog Feeder ***************************

	Dialog
	Title "PPL MIS-GIS" 
	Control StaticText
		Title "Please Enter Feeder_ID:"  
	Control EditText 
		Value strFD_ID		'this is a Global String variable
		Into strFD_ID	
	Control OKButton
	Control CancelButton  
			
	If Not CommandInfo(CMD_INFO_DLG_OK) Then 
		' ...then the user clicked CANCEL
		Note "Program will now close!"
		Close All Interactive
		Exit Sub
	End If
	If CommandInfo(CMD_INFO_DLG_OK) And strFD_ID = "" Then
		Note "Invalid Feerder_ID!"
		Call Calc_Network_Loss
	Else	' ...the user clicked OK
		Select FD_ID,KV from Feeders 
			where FD_ID = Ucase$(str$(strFD_ID)) into Temp1
		Select * from Feeders, HV, LV 
			where Feeders.FD_ID = HV.FD_ID 
			And HV.FD_ID = LV.FD_ID 
			And Feeders.FD_ID = Ucase$(str$(strFD_ID)) into Temp2

		If Temp1.COL1 = Ucase$(str$(strFD_ID)) And Temp2.COL1 <> "" Then
			feederID = Ucase$(Str$(strFD_ID))
			voltID = Temp1.COL2
			Note "Select HV or LV Line" 			
		Else
			Note "Invalid Feerder_ID!"
			Call Calc_Network_Loss
		End If
	End If

'************* Change Map, Set Centre and Zoom to Feeder ******************

	Select * from HV where FD_ID = Ucase$(str$(strFD_ID)) into Lines_HV
	Select * from LV where FD_ID = Ucase$(str$(strFD_ID)) into Lines_LV

	Set Map redraw off
	Set Map Distance Units "m" 
	TableName = vt_Path + "\" + "PL.tab"
	Open Table TableName As Poles Interactive
	Set Map Window Map_Win_Id Layer 1 Display Off
	Set Map Window Map_Win_Id Layer 2 Display Off
	Add Map Window Map_Win_Id Layer "Poles"
	Add Map Window Map_Win_Id Layer "Lines_LV"
	Add Map Window Map_Win_Id Layer "Lines_HV"
	Set Map Layer "Poles"  Display Global Global Symbol (34,65280,6)
	Set Map Layer "Lines_LV"  Display Global Global Line (1,2,255)
	Set Map Layer "Lines_HV"  Display Global Global Line (2,2,16711680) 
	Set Map Window Map_Win_Id Layer 1 Arrows On
	Set Map Window Map_Win_Id Layer 2 Arrows On
	Set Map Window Map_Win_Id Zoom Entire Layer 2
	Set Window Map_Win_Id Max
	Set map redraw on

	Run Menu Command ID 23
	Run Menu Command M_QUERY_UNSELECT

Res_Calc_Network_Loss:
	Exit Sub

Err_Manage:
	'note "Calc_Network_Loss: "+str$(err())+" "+error$()
	Resume Next

End Sub

'*********************************************

Sub CutaLine

	Dim x					as Float
	Dim y 					as Float
	Dim iFound			as Integer
	Dim i					as Integer
	Dim j					as Integer
	Dim sTable			as String
	Dim iRowid			as Integer
	Dim aTable			as Alias
	Dim aTableObj			as Alias
	Dim aFrom				as Alias
	Dim aNext 			as Alias
	Dim aPhase 			as Alias
	Dim aCable 			as Alias
	Dim aSpan				as Alias
	Dim aVoltage			as Alias
	Dim aUG				as Alias
	Dim aLoad				as Alias
	Dim lFound			as Logical
	Dim Counter			as Integer
	Dim xyUnits			as String
	Dim CosName			as String
	Dim Map_Win_id 		as Integer
	Dim Phase3			as Integer
	Dim PhaseA			as Integer
	Dim PhaseB			as Integer 
	Dim PhaseC 			As Integer
	Dim Trans_KVA			As Integer
	
	OnError goto Err_CutaLine


'*************  Getting window ID *************

	Map_Win_id = FrontWindow()

	If Map_Win_id = 0 Then
		Exit Sub
	End If

'*********************************************** 

	CosName = WindowInfo(Map_Win_Id,WIN_INFO_TABLE)

	Set CoordSys Window Map_Win_id 
	
	x = CommandInfo(CMD_INFO_X)
	y = CommandInfo(CMD_INFO_Y)

	xyunits = MapperInfo(Map_Win_id,MAPPER_INFO_XYUNITS)

	ifound = SearchPoint(Map_Win_Id,x,y)

	If ifound = 0 Then
		lFound = FALSE
	Else
		lFound = FALSE
		For i = 1 to ifound
      		' Get the name of the table containing a "hit".
	      	sTable = SearchInfo(i, SEARCH_INFO_TABLE)
   
	      	' Get the row ID number of the object that was a hit.
	      	irowid = SearchInfo(i, SEARCH_INFO_ROW)

		   	If Right$(sTable, 2) = "HV" Then 
	        	' Fetch the row of the object the user clicked on.
	        	Fetch rec iRowid  From sTable
	        	aTable = sTable + ".LN_ID"
				aFrom = sTable + ".FROM_ID"
				aNext  = sTable + ".NEXT_ID"
				aCable  = sTable + ".CABLE_ID"
				aSpan = sTable + ".LENGTH"
				aVoltage = sTable + ".VOLTAGE"
				aPhase = sTable + ".PHASE_ID"
				aUG = sTable + ".UG"
				aLoad = sTable + ".LOAD"
				aTableObj = sTable + ".obj"
				Print ""
				Print "T&D Network Trace From LN_ID: " + aTable
				Print ""
				Print "From" + "," + "To" + "," + "Cable" + "," + "Span" + "," + "Volt" + "," + "Phase" + "," + "UG" + "," + "Load"
				Print aFrom + "," + aNext + "," + aCable + "," + aSpan + "," + aVoltage + "," + aPhase + "," + aUG + "," + aLoad
				Call LineGridCut_HV(aTable, TRUE, CosName)
				lFound = TRUE
			ElseIf
				Right$(sTable, 2) = "LV" Then 
	        	' Fetch the row of the object the user clicked on.
	        	Fetch rec iRowid  From sTable
	        	aTable = sTable + ".LN_ID"
				aFrom = sTable + ".FROM_ID"
				aNext = sTable + ".NEXT_ID"
				aCable = sTable + ".CABLE_ID"
				aSpan = sTable + ".LENGTH"
				aVoltage = sTable + ".VOLTAGE"
				aPhase = sTable + ".PHASE_ID"
				aUG = sTable + ".UG"
				aLoad = sTable + ".LOAD"
				aTableObj = sTable + ".obj"
				Print ""
				Print "T&D Network Trace From LN_ID: " + aTable
				Print ""
				Print "From" + "," + "To" + "," + "Cable" + "," + "Span" + "," + "Volt" + "," + "Phase" + "," + "UG" + "," + "Load"
				Print aFrom + "," + aNext + "," + aCable + "," + aSpan + "," + aVoltage + "," + aPhase + "," + aUG + "," + aLoad
				Call LineGridCut_LV(aTable, TRUE, CosName)
				lFound = TRUE
      		End If 
    		Next
	End If

	If lFound = FALSE Then
		Print "Sorry, no Lines to Choose!"
		Print "Make sure the layer Lines is selectable or try again!"
		Exit Sub

	End If

	Select Sum(Meters.PRE_CONSUMP) from Meters, Lines_LV2 where Meters.Obj Intersects Lines_LV2.Obj into TotalConsumption
	cKWH = TotalConsumption.COL1

	Select Sum(Lines_LV2.LENGTH) from Lines_LV2 into TotalLength_LV
	totalSPAN_LV = TotalLength_LV.COL1

	Select Sum(Lines_HV2.LENGTH) from Lines_HV2 into TotalLength_HV
	totalSPAN_HV = TotalLength_HV.COL1

	Select Count(*) from Meters, Lines_LV2 where CS_MTR_CONECT = "ABC Phase" AND Meters.obj Intersects Lines_LV2.obj into Count_ThreeP
	phase3 = Count_ThreeP.COL1

	Select Count(*) from Meters, Lines_LV2 where CS_MTR_CONECT = "A" AND Meters.obj Intersects Lines_LV2.obj into A_Phase
	phaseA = A_Phase.COL1

	Select Count(*) from Meters,Lines_LV2 where CS_MTR_CONECT = "B" AND Meters.obj Intersects Lines_LV2.obj into BPhase
	phaseB = BPhase.COL1

	Select Count(*) from Meters,Lines_LV2 where CS_MTR_CONECT = "C" AND Meters.obj Intersects Lines_LV2.obj into CPhase
	phaseC = CPhase.COL1

	Select Trans.tx_kva from Trans where Trans.TX_ID = strTX_ID into TX_KVA
	Trans_KVA = TX_KVA.COL1


	Print "Loss in 1 month TOTAL BLACK OUT = " + cKWH + " KWH = $ " + cKWH * 0.70
	Print "Loss in 1 week TOTAL BLACK OUT = " + cKWH/4 + " KWH = $ " + cKWH/4 * 0.70
	Print "Loss in 1 day TOTAL BLACK OUT = " + cKWH/28 + " KWH = $ " + cKWH/28 * 0.70
	Print "Loss in 1 hour TOTAL BLACK OUT = " + cKWH/28/24 + " KWH = $ " + cKWH/28/24 * 0.70
	Print "Total Length of LV Lines in Meters = " + totalSPAN_LV + " m"
	Print "Total Length of HV Lines in Meters = " + totalSPAN_HV + " m"
	Print "Total Customers Connected 3 Phase = " + phase3
	Print "Total Customers Connected A Phase = " + phaseA
	Print "Total Customers Connected B Phase = " + phaseB
	Print "Total Customers Connected C Phase = " + phaseC
	Print "Transformer KVA = " + Trans_KVA
	Print "Transformer LOAD USAGE = " + cKWH + " KWH Last Month"
	Print "Transformer LOAD GENERATED = " + cKWH + " KWH Last Month"

	Add Map Window Map_Win_id Layer Lines_HV2
	Set map redraw on
	Set Map Window Map_Win_id Layer Lines_HV2 Editable ON
	Run Menu Command M_QUERY_SELECTALL
	Run Menu Command M_EDIT_CLEAR
	Remove Map Window Map_Win_id Layer Lines_HV2
	Close Table Lines_HV2

	Add Map Window Map_Win_id Layer Lines_LV2
	Set map redraw on
	Set Map Window Map_Win_id Layer Lines_LV2 Editable ON
	Run Menu Command M_QUERY_SELECTALL
	Run Menu Command M_EDIT_CLEAR
	Remove Map Window Map_Win_id Layer Lines_LV2
	Close Table Lines_LV2

Res_CutaLine:
	Exit Sub

Err_CutaLine:
	'note "CutaLine: "+str$(err())+" "+error$()
	Resume Next

End Sub

'****************************************************************************

Sub LineGridCut_HV(ByVal Polefrom as String, ByVal start as Logical, ByVal CosName as String)

Dim aLN_ID			as Alias
Dim aPole_From		as Alias
Dim aPole_To			as Alias
Dim aCable 			as Alias
Dim aLength			as Alias
Dim aVoltage 			as Alias
Dim aPhase 			as Alias
Dim aUG 				as Alias
Dim aLoad				as Alias
Dim aObj				as Alias
Dim poleto(1)			as String
Dim i					as Integer
Dim j 					as Integer
Dim LineObj			as Object
Dim SelName			as String
Dim TableName			As String
Dim txIronLosses  	As Integer  'Watts
Dim txCopperLosses  As Integer	'Watts
Dim txAvgLTLosses  	As Integer	'Watts

	OnError goto Err_LineGridCut_HV

'***********Set Message Window****************

	Open Window Message ' open Message window 
	Set Window Message 
	Font ("Arial Narrow", 1, 10, BLUE) ' Arial bold...
	Position (0.25, 0.25) ' place in upper left 
	Width 3.0 ' make window 3" wide 
	Height 5.0 ' make window 1" high 

	aLN_ID = "Lines_HV.LN_ID"
	aPole_From = "Lines_HV.FROM_ID"
	aPole_To = "Lines_HV.NEXT_ID"
	aCable = "Lines_HV.CABLE_ID"
	aLength = "Lines_HV.LENGTH"
	aVoltage = "Lines_HV.VOLTAGE"
	aPhase = "Lines_HV.PHASE_ID"
	aUG = "Lines_HV.UG"
	aLoad = "Lines_HV.LOAD"
	aObj = "Lines_HV.obj"

	If start Then
		Select * From Lines_HV into Selection_HV
			Where LN_ID = Val(Right$(PoleFrom,6))
			If SelectionInfo(SEL_INFO_NROWS) = 0 Then
				Exit Sub
			End if
		SelName = SelectionInfo(SEL_INFO_SELNAME)
		Fetch First From Selection_HV
		If str$(aPole_To) <> "" Then
			LineObj = aObj
			Alter Object LineObj
				Info OBJ_INFO_PEN, MakePen(3,2,YELLOW)
			Insert Into CosName (Obj)
				Values(LineObj)
			If Left$(Str$(aPole_To),2)<> "TX" then 
				Call LineGridCut_HV(aPole_To,False,CosName)
			ElseIf Left$(Str$(aPole_To),2)= "TX" Then
 				strTX_ID = str$(aPole_To)

				'*************************** Dialog TX ***************************
				 
				Dialog
				Title "PPL MIS-GIS" 
				Control StaticText
				Title "Please Enter Iron Losses:"  
				Control EditText 
					Value txIronLosses  		 
					Into txIronLosses  
				Control OKButton
				
				If CommandInfo(CMD_INFO_DLG_OK) And txIronLosses = 0 Then
					Note "Invalid Data Input!"
					Call Calc_Network_Loss
					Exit Sub
				Else	' ...the user clicked OK
					totaltxIronLosses = totaltxIronLosses + txIronLosses
					Note "Please Continue...."
					Call LineGridCut_LV(aPole_To,FALSE,CosName)	
				End If
			Else
				Call LineGridCut_LV(aPole_From,FALSE,CosName)
			End if
		End if
		
		Commit Table Selection_HV As vt_Path + "\" + "SimLine_HV.TAB" Interactive

		Close Table SelName
	Else
		Select * From Lines_HV into Selection_HV
			Where FROM_ID = polefrom
		If SelectionInfo(SEL_INFO_NROWS) = 0 Then
			Exit Sub
		End if
		SelName = SelectionInfo(SEL_INFO_SELNAME)
		Fetch First From Selection_HV
		i = 1
  		Do While Not EOT(Selection_HV)
			If str$(aPole_to) <> "" Then
				Print poleFrom + "," + str$(aPole_To) + "," + aCable + "," + aLength + "," + aVoltage + "," + aPhase + "," + aUG + "," + aLoad
					LineObj = aObj
				Alter Object LineObj
					Info OBJ_INFO_PEN, MakePen(3,2,YELLOW)
				Insert into CosName (Obj)
					Values(LineObj)
				If left$(str$(aPole_To),2)<>"TX" Then
					ReDim PoleTo(i)
					poleTo(i)=str$(aPole_To)
					i = i + 1
				ElseIf Left$(Str$(aPole_To),2)= "TX" Then
					strTX_ID = str$(aPole_To)
 
					'*************************** Dialog TX ***************************

					Dialog
					Title "PPL MIS-GIS" 
					Control StaticText
					Title "Please Enter Iron Losses:"  
					Control EditText 
						Value txIronLosses  		 
						Into txIronLosses  
					Control OKButton
		
						If CommandInfo(CMD_INFO_DLG_OK) And txIronLosses = 0 Then
							Note "Invalid Data Input!"
							Call Calc_Network_Loss
							Exit Sub
						Else	' ...the user clicked OK
							totaltxIronLosses = totaltxIronLosses + txIronLosses
							Note "Please Continue...." 
							Call LineGridCut_LV(aPole_To,FALSE,CosName)			
						End If
				Else
					Call LineGridCut_LV(aPole_From,FALSE,CosName)
 				End if
			End if
		   	Fetch Next From Selection_HV

  		Loop

		Open Table vt_Path + "\" + "SimLine_HV.TAB" Interactive As Lines_HV2
		
		Insert Into Lines_HV2 ( COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8, COL9, COL10, COL11, COL12, COL13, COL14) 
			Select COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8, COL9, COL10, COL11, COL12, COL13, COL14 From Selection
	
		Close Table SelName
		For j = 1 to i - 1
			Call LineGridCut_HV(PoleTo(j),FALSE,CosName)
		Next
	End if

	Select * From Selection_HV Where Next_ID <> strTX_ID
		If SelectionInfo(SEL_INFO_NROWS) = 0 Then
			Exit Sub
		End If
		Fetch First From Selection 
		Call LineGridCut_HV(PoleFrom,FALSE,CosName)

Res_LineGridCut_HV:

	Exit Sub
	
Err_LineGridCut_HV:

	'note "LineGridCut_HV: "+str$(err())+" "+error$()
	Resume Res_LineGridCut_HV

End Sub

'********************************************************************************************
Sub LineGridCut_LV(ByVal Polefrom as String, ByVal start as Logical, ByVal CosName as String)

Dim aLN_ID			as Alias
Dim aPole_From		as Alias
Dim aPole_To			as Alias
Dim aCable 			as Alias
Dim aLength			as Alias
Dim aVoltage 			as Alias
Dim aPhase 			as Alias
Dim aUG 				as Alias
Dim aLoad				as Alias
Dim aObj				as Alias
Dim poleto(1)			as String
Dim i					as Integer
Dim j 					as Integer
Dim LineObj			as Object
Dim SelName			as String
Dim TableName		As String

	OnError goto Err_LineGridCut_LV

	Open Window Message ' open Message window 
	Set Window Message 
	Font ("Arial", 1, 10, BLUE) ' Arial bold...
	Position (0.25, 0.25) ' place in upper left 
	Width 4.0 ' make window 3" wide 
	Height 6.5 ' make window 1" high 

	aLN_ID = "Lines_LV.LN_ID"
	aPole_From = "Lines_LV.FROM_ID"
	aPole_To = "Lines_LV.NEXT_ID"
	aCable = "Lines_LV.CABLE_ID"
	aLength = "Lines_LV.LENGTH"
	aVoltage = "Lines_LV.VOLTAGE"
	aPhase = "Lines_LV.PHASE_ID"
	aUG = "Lines_LV.UG"
	aLoad = "Lines_LV.LOAD"
	aObj = "Lines_LV.obj"
	
	If start Then
	'Print "From" + "," + "To" + "," + "Cable" + "," + "Span" + "," + "Volt" + "," + "Phase" + "," + "UG" + "," + "Load"
		Select * From Lines_LV
			Where LN_ID = Val(Right$(PoleFrom,6))
			If SelectionInfo(SEL_INFO_NROWS) = 0 Then
				Exit Sub
			End if
		SelName = SelectionInfo(SEL_INFO_SELNAME)
		Fetch First From Selection
		If str$(aPole_To) <> "" Then
			LineObj = aObj
			Alter Object LineObj
				Info OBJ_INFO_PEN, MakePen(3,2,BLUE)
			Insert Into CosName (Obj)
				Values(LineObj)
			If Left$(Str$(aPole_To),2)<> "MT" then 
				Call LineGridCut_LV(aPole_To,False,CosName)
			End if
		End if
		
		Commit Table Selection As vt_Path + "\" + "SimLine_LV.TAB" Interactive

		Close Table SelName
	Else
		Select * From Lines_LV 
			Where FROM_ID = polefrom
		If SelectionInfo(SEL_INFO_NROWS) = 0 Then
			Exit Sub
		End if
		SelName = SelectionInfo(SEL_INFO_SELNAME)
		Fetch First From Selection
		i = 1
  		Do While Not EOT(Selection)
			If str$(aPole_to) <> "" Then
				Print poleFrom + "," + str$(aPole_To) + "," + aCable + "," + aLength + "," + aVoltage + "," + aPhase + "," + aUG + "," + aLoad
				LineObj = aObj
				Alter Object LineObj
					Info OBJ_INFO_PEN, MakePen(3,2,BLUE)
				Insert into CosName (Obj)
					Values(LineObj)
				If left$(str$(aPole_To),2)<>"MT" Then
					ReDim PoleTo(i)
					poleTo(i)=str$(aPole_To)
					i = i + 1
				End if
			End if
		   	Fetch Next From Selection
  		Loop

		Open Table vt_Path + "\" + "SimLine_LV.TAB" Interactive As Lines_LV2
		
		Insert Into Lines_LV2 ( COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8, COL9, COL10, COL11, COL12, COL13, COL14) 
			Select COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8, COL9, COL10, COL11, COL12, COL13, COL14 From Selection
	
		Close Table SelName

		For j = 1 to i - 1
			Call LineGridCut_LV(PoleTo(j),FALSE,CosName)
		Next
		
	End if

	Select * from Lines_LV2 where left$(FROM_ID,2) = "TX"
	If SelectionInfo(SEL_INFO_NROWS) = 0 Then
			Exit Sub
	End If
	Fetch First From Selection 
		Call LineGridCut_HV(PoleFrom,FALSE,CosName)

Res_LineGridCut_LV:

	Exit Sub
	
Err_LineGridCut_LV:

	'note "LineGridCut_LV: "+str$(err())+" "+error$()
	Resume Res_LineGridCut_LV

End Sub

