'*****************************************************************
'*  Name   : CreateLN_LV
'*  Purpose: Create Lines Low Voltage
'*
'*				1. Select Feeder and Transformer
'*				2. Open relevant points tables to connect LV Lines
'*				3. Connect points with lines
'*				4. Populate LV Lines Table with data
'*
'*  Author : Edwin Liava'a 21/01/2013
'*  Inputs : Relevant points tables
'*  Outputs: LN_LV
'*           
'*****************************************************************

Include "PPL_Lib.def"
Include "mapbasic.def"
Include "menu.def"
Include "Icons.def"  

'*****************************************************************

' Sub Program (Procedure) Declarations

declare sub CreateLN_LV			
declare sub PickID2
declare sub LetsContinue2(byval x1 as float, byval y1 as float, byval nextID as string)

' Declare Global Variables

Global db_conn_path 												As String	 'Access
Global rs_path 														As String	 'MapInfo Raster Layers (BackDrops)
Global vt_Path 														As String	 'MapInfo Vector Layers
Global feederID,fromID,nextID,phaseID,cableID,ugID,txID		As String
Global strFD_ID														As String
Global lineID															As Integer
Global voltID															As Float
Global load_kwh 														As Float
Global WIA															As Logical 'Work In Action
Global x1,y1,x2,y2													As Float 


'******************************CreateLN_LV Procedure********************************
' this procedure open the tables and display the tools

Sub CreateLN_LV

	Dim Map_Win_id 	As Integer
	Dim i,j			As Integer
	Dim TableName		As String
	Dim strTX_ID		As String
	Dim iXC, iYC		As Float
	Dim iRowid		As integer

	WIA = FALSE
	
	Close All

OnError Goto Err_Manage

	TableName = db_conn_path + "\" + "TX.tab"
	Open Table TableName As TX Interactive
	TableName = db_conn_path + "\" + "PL.tab"
	Open Table TableName As PL Interactive
	TableName = db_conn_path + "\" + "MT.tab"
	Open Table TableName As MT Interactive
	TableName = db_conn_path + "\" + "LN_LV.tab"
	Open Table TableName As LN_LV Interactive
	TableName = db_conn_path + "\" + "LN_HV.tab"
	Open Table TableName As LN_HV Interactive
	TableName = db_conn_path + "\" + "BL.tab"
	Open Table Tablename As Buildings Interactive 
	TableName = db_conn_path + "\" + "FD.tab"
	Open Table Tablename As Feeders Interactive 
		
	Map From LN_LV, LN_HV, TX, PL, MT, Buildings Max
	
	Set Map Distance Units "m"
	Set Map Redraw Off
	Set Map Layer LN_LV Editable On
	Set Map Redraw On
	set map redraw off
	Set Map Layer 1 
		Label Font ("Arial",257,8,0,16777215) 
		Auto On Overlap On Visibility Zoom (0, 1000) Units "m"
	set map redraw on
	set map redraw off
	Set Map Layer 2 
		Label Font ("Arial",257,8,0,16777215) 
		Auto On Overlap On Visibility Zoom (0, 1000) Units "m"
	set map redraw on
	set map redraw off
	Set Map Layer 3 
		Label Font ("Arial",257,8,0,16777215) 
		Auto On Overlap On Visibility Zoom (0, 1000) Units "m"
		Activate Using Tag_Target_Photo On Labels Objects Relative Path On
	set map redraw on
	set map redraw off
	Set Map Layer 4 
		Label Font ("Arial",257,8,0,16777215) 
		Auto On Overlap On Visibility Zoom (0, 1000) Units "m"
		Activate Using Tag_Target_Photo On Labels Objects Relative Path On
	set map redraw on
	set map redraw off
	Set Map Layer 5 
		Label Font ("Arial",257,8,0,16777215) 
		Auto On Overlap On Visibility Zoom (0, 1000) Units "m"
		Activate Using Tag_Target_Photo On Labels Objects Relative Path On
	set map redraw on

	Create ButtonPad "Line" As ToolButton	
	Icon MI_ICON_HOT_LINK
	Cursor MI_CURSOR_FINGER_UP
	DrawMode DM_CUSTOM_POINT
	ID 23	
	Calling PickID2
	Width 10
	Float
	Show

'+++++++++++++++++++++++++++  Getting window ID +++++++++++++++++++++

	Map_Win_id = FrontWindow()

	If Map_Win_id = 0 Then
		Exit Sub
	End If

'+++++++++++++++++++++++++++ Dialog +++++++++++++++++++++++
'Dialog Box for Feeder_ID

	Dialog
	Title "PPL MIS-GIS" 
	Control StaticText
		Title "Please Enter Feeder_ID:"   
	Control EditText 
		Value strFD_ID		 
		Into strFD_ID	
	Control OKButton
	Control CancelButton  
			
	If Not CommandInfo(CMD_INFO_DLG_OK) Then 
		' ...then the user clicked CANCEL
		Note "Program will now close!"
		Close All Interactive
		Goto CreateLN_LV
	End If
	If CommandInfo(CMD_INFO_DLG_OK) And strFD_ID = "" Then
		Note "Invalid Feerder_ID!"
		Call CreateLN_LV
	Else	' ...the user clicked OK
		Select FD_ID from Feeders where FD_ID = Ucase$(str$(strFD_ID)) into Temp1
		If Temp1.COL1 = Ucase$(str$(strFD_ID)) Then
			feederID = Ucase$(Str$(strFD_ID))			
		Else
			Note "Invalid Feerder_ID!"
			Call CreateLN_LV
		End If
	End If

'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'Dialog Box for Transformer ID

	Dialog
	Title "PPL MIS-GIS" 
	Control StaticText
		Title "Please Enter TXformer_ID:"   
	Control EditText 
		Value strTX_ID		 
		Into strTX_ID
	Control OKButton
	Control CancelButton  
			
	If Not CommandInfo(CMD_INFO_DLG_OK) Then 
		' ...the user clicked CANCEL
		Note "Program will now close!"
		Close All Interactive
		Exit Sub
	End If
	If CommandInfo(CMD_INFO_DLG_OK) And strTX_ID = "" Then
		Note "Invalid Transformer_ID!"
		Call CreateLN_LV
	Else
		' ...the user clicked OK
		Select TX_ID from TX where TX_ID = Ucase$(str$(strTX_ID)) into Temp2
		If Temp2.COL1 = Ucase$(str$(strTX_ID)) Then
			txID = Ucase$(Str$(strTX_ID))			
			Note "Pick LV Asset to Connect LV Line" 
		Else
			Note "Invalid Transformer_ID!"
			Call CreateLN_LV
		End If
	End If

'+++++++++++++++++ Set Centre and Zoom of Map ++++++++++++++++++++++++

		iXC = CentroidX(Temp2.obj)
		iYC = CentroidY(Temp2.obj)
		Set Map Center (iXC,iYC)
		Set Map Window Map_Win_id Layer 1 Arrows On
 
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

CreateLN_LV:
	Exit Sub
	' The Exit Sub prevents the program from
	' unintentionally executing the error handlers
Err_Manage:
	Note "Error: " + str$(err()) + ", " + error$()
	Resume CreateLN_LV

End Sub

'*****************************PickID2 Procedure*********************************
' this procedure selects a pole or transformer to connect a HV line from and to

Sub PickID2

	Dim Map_Win_id 		As Integer
	Dim x,x1				As Float
	Dim y,y1				As Float
	Dim iFound			As Integer
	Dim i					As Integer
	Dim j					As Integer
	Dim sTable			As String
	Dim iRowid			As Integer
	Dim aTable			As Alias
	Dim lFound			As Logical
	Dim Counter			As Integer
	Dim xyUnits			As String
	Dim CosName			As String
	Dim ofound			As Object
	
OnError GoTo Err_Manage

	Map_Win_id = FrontWindow()
	If WindowInfo(Map_Win_id,WIN_INFO_TYPE) <> WIN_MAPPER Then
		Note "You must Select a Map Window first"
		Exit Sub
	End If

	CosName = WindowInfo(Map_Win_Id,WIN_INFO_TABLE)

	Set CoordSys Window Map_Win_id
	
	x = CommandInfo(CMD_INFO_X)
	y = CommandInfo(CMD_INFO_Y)

	xyunits = MapperInfo(Map_Win_id,MAPPER_INFO_XYUNITS)
	
	ifound = SearchPoint(Map_Win_Id,x,y)
	
	If ifound = 0 Then
		lFound = FALSE
	Else
		lFound = FALSE
		For i = 1 to ifound
      		' Get the name of the table containing a "hit".
	      	stable = SearchInfo(i, SEARCH_INFO_TABLE)
   
	      	' Get the row ID number of the object that was a hit.
	      	irowid = SearchInfo(i, SEARCH_INFO_ROW)
	      	
			If sTable = "TX" Then 
	        		' Fetch the row of the object the user clicked on.
	        		Fetch rec iRowid From sTable
	        		ofound = TX.obj
					x1 = centroidX(ofound)
					y1 = centroidY(ofound)
					nextID = TX.TX_ID
					phaseID = TX.Tx_Phase
					cableID = "Unknown"
					if left$(phaseID,1) <> "3" then
						voltID = 240
					else
						voltID = 415
					end if
					ugID = TX.LV_UG_Cable_Installed
					lFound = TRUE
			ElseIf sTable = "PL" Then 
	        		' Fetch the row of the object the user clicked on.
	        		Fetch rec iRowid From sTable
	        		ofound = PL.obj
					x1 = centroidX(ofound)
					y1 = centroidY(ofound)
					nextID = PL.PL_ID
					phaseID = PL.LV_Line_Phase_Conn
					ugID = PL.LV_UG_Cable_Installed
					if PL.Apple_6_1_300 <> 0 Then
						cableID = "Apple"
					ElseIF PL.Cherry_7_475 <> 0 Then
						cableID = "Cherry"
					ElseIF PL.Copper <> 0 Then
						cableID = "Copper"
					ElseIF PL.Grape <> 0 Then
						cableID = "Grape"
					ElseIF PL.Mars_6_1_375 <> 0 Then
						cableID = "Mars"
					ElseIF PL.Saturn_37__300 <> 0 Then
						cableID = "Saturn"
					Else
						cableID = "Unknown"
					End If
					
					If left$(phaseID,3) <> "ABC" then
						voltID = 240
					else
						voltID = 415
					end if
					lFound = TRUE			
			ElseIf sTable = "MT" Then 
	        		' Fetch the row of the object the user clicked on.
	        		Fetch rec iRowid From sTable
	        		ofound = MT.obj
					x1 = centroidX(ofound)
					y1 = centroidY(ofound)
					nextID = MT.MT_ID
					phaseID = MT.CS_PHASE_CONECTION
					cableID = "Service"
					if phaseID <> "3" then
						voltID = 240
					else
						voltID = 415
					end if
					ugID = MT.UG
					load_kwh = MT.CUR_CONSUMP
					lFound = TRUE
      		End If 
    	Next
	End If

	If lFound = FALSE Then
		Print chr$(12)
		Note "Please Try Again!"
	else
		call LetsContinue2(x1, y1, nextID)
	End If
	
PickID2:
	Exit Sub
	' The Exit Sub prevents the program from
	' unintentionally executing the error handlers
Err_Manage:
	Note "Error: " + str$(err()) + ", " + error$()
	Resume PickID2

End Sub 

'*********************************LetsContinue2 procedure*********************************
' this procedure allows you to continue connecting PL with LN_LV

Sub LetsContinue2(Byval x1 As Float, byval y1 As Float, Byval nextID As String)

	Dim i,j, irow1			As Integer
	Dim newline				As Object
	Dim counter				As Integer
	Dim dist					As Float

OnError Goto Err_Manage

	If WIA = FALSE then 
		x2 = x1 
		y2 = y1
		fromID = nextID 
		WIA = TRUE
		Note "Pick the NextID to Connect LV Line!"
		Exit Sub
	End If
	
	dist = Distance(x2,y2,x1,y1,"m")
	Select Max(LN_ID) from LN_LV into MaxID
	lineID = MaxID.COL1 + 1
		
	Insert Into LN_LV(LN_ID,FD_ID,FROM_ID,NEXT_ID,PHASE_ID,CABLE_ID,VOLTAGE,LENGTH,UG,XB,YB,XE,YE,LOAD)
	Values (lineID, feederID, fromID, nextID, phaseID, cableID, voltID, dist, ugID, x2, y2, x1, y1, load_kwh)

	Update LN_LV Set LN_ID = rowid		

	counter = tableinfo(LN_LV, TAB_INFO_NROWS)	

	Create Line
			Into Variable newline
			(x2, y2) (x1, y1)
			Pen MakePen(2, 2, BLUE)

	Update LN_LV
		Set Obj = newline
		where  RowID = counter

	'******* Set Message Window *************

	Set Window WIN_INFO Table LN_LV Rec counter
	Set Window WIN_INFO
	Position (0.10, 0.10)  
	Font ("Arial", 1, 10, BLUE)  
	Width 3.0  
	Height 5.0  
	Open Window WIN_INFO

	If Left$(nextID,2) = "MT" And Left$(fromID,2) = "TX" Then
		irow1 = 1
		Fetch First From MT
		Do while Not EOT(MT)
			If MT.MT_ID = nextID Then
				Update MT Set CS_TX_ID = txID where rowid = irow1
				Update MT Set CS_POLE_ID = fromID where rowid = irow1
				Update MT Set Next_ID = fromID where rowid = irow1
				Update MT Set CS_FEEDER_ID = strFD_ID where rowid = irow1
			End If
			'Commit Table MT
			Fetch Next From MT
			irow1 = irow1 + 1
		Loop
	ElseIf Left$(nextID,2) = "MT" And Left$(fromID,2) = "PL" Then
		irow1 = 1
		Fetch First From MT
			Do while Not EOT(MT)
				If MT.MT_ID = nextID Then
					Update MT Set CS_POLE_ID = fromID where rowid = irow1
					Update MT Set Next_ID = fromID where rowid = irow1
					Update MT Set CS_TX_ID = txID where rowid = irow1
					Update MT Set CS_FEEDER_ID = strFD_ID where rowid = irow1
				End If
				'Commit Table MT
				Fetch Next From MT
				irow1 = irow1 + 1
			Loop
	ElseIf Left$(nextID,2) = "MT" And Left$(fromID,2) = "MT" Then
		irow1 = 1
		Fetch First From MT
		Do while Not EOT(MT)
			If MT.MT_ID = nextID Then
				Update MT Set CS_POLE_ID = fromID where rowid = irow1
				Update MT Set Next_ID = fromID where rowid = irow1
				Update MT Set CS_TX_ID = txID where rowid = irow1
				Update MT Set CS_FEEDER_ID = strFD_ID where rowid = irow1
			End If
			'Commit Table MT
			Fetch Next From MT
			irow1 = irow1 + 1
		Loop
	ElseIf Left$(nextID,2) = "MT" And Left$(fromID,2) = "ND" Then
		irow1 = 1
		Fetch First From MT
		Do while Not EOT(MT)
			If MT.MT_ID = nextID Then
				'Update MT Set ND_ID = fromID where rowid = irow1
				Update MT Set Next_ID = fromID where rowid = irow1
				Update MT Set CS_TX_ID = txID where rowid = irow1
				Update MT Set CS_FEEDER_ID = strFD_ID where rowid = irow1
			End If
			'Commit Table MT
			Fetch Next From MT
			irow1 = irow1 + 1
		Loop
	End If

	WIA = FALSE

LetsContinue2:
	Exit Sub
	' The Exit Sub prevents the program from
	' unintentionally executing the error handlers
Err_Manage:
	Note "Error: " + str$(err()) + ", " + error$()
	Resume LetsContinue2

End Sub
