'*****************************************************************
'*  Name   : CutLN_LV
'*  Purpose: Simulate Network Trace
'*
'*  Inputs : Relevant points tables
'*  Outputs: loss in KWH = $
'*           
'*****************************************************************

Include "PPL_Lib.def"
Include "mapbasic.def"
Include "menu.def"
Include "Icons.def"  

'*****************************************************************

Declare sub main
Declare Sub CutaLine
Declare Sub LineGridCut(ByVal Polefrom as String, ByVal start as Logical, ByVal Cosname as String)

Global db_conn_Path As String	 'Access
Global rs_path As String	 'MapInfo Raster Layers (BackDrops)
Global vt_Path As String	 'MapInfo Vector Layers
Global cKWH,totalSPAN As Float

'*****************************************************************

Sub main

	Dim TableName	As String
	Dim Map_Win_id As Integer

	Dim frontPath As String
	Dim ilen As Integer
	
	OnError Goto Err_main
	
	frontPath = ApplicationDirectory$()		' get directory where this MapBasic program located
	ilen = len(frontPath)
	frontPath = mid$(frontpath, 1, ilen - 10)	' remove trailing string "\mapbasic\"

	vt_Path = frontPath + "\mapinfo"


'************* close some toolbars *************

	Create ButtonPad "PPL MIS/GIS" As	
			ToolButton
				Icon MI_ICON_CUT
				Cursor MI_CURSOR_CROSSHAIR
				DrawMode DM_CUSTOM_POINT
				ID 23	
				HelpMsg "Cut a Line and show the cutted grid\nCut a Line"
				Calling CutaLine
			Title " "
			width 8
			Float
			Show

	Alter ButtonPad "Drawing" Hide
	Alter ButtonPad "Main" Show Fixed
	Alter ButtonPad "ODBC" Hide

'************* close and open map layers *************
	
	Close All

	TableName = vt_Path + "\" + "LN_LV.tab"
	Open Table TableName As Lines Interactive
	TableName = vt_Path + "\" + "TX.tab"
	Open Table TableName As Trans Interactive
	TableName = vt_Path + "\" + "MT.tab"
	Open Table TableName As Meters Interactive
		
	Map From Lines, Trans, Meters Max

'*************  Getting window ID *************

	Map_Win_Id = FrontWindow()
	If Map_Win_id = 0 Then
		Exit Sub
	End If

'************* changing map *************

	Set Map redraw off
	Set Map Distance Units "m" 
	Set Map Window Map_Win_Id Layer 1 Arrows On
	Set Map Window Map_Win_Id Zoom Entire Layer 1
'	Set Map Layer Lines Zoom (80, 4000) Units "m" On
	TableName = vt_Path + "\" + "PL.tab"
	Open Table TableName As Poles Interactive
	Add Map Window Map_Win_Id Layer "Poles"
	Set Map Layer "Poles"  Display Global Global Symbol (34,65280,6) 
'	Set Map Layer "Lines"  Display Global
	set Window Map_Win_Id Max
	Set map redraw on

	OnError goto Err_main

	Run Menu Command ID 23

Res_main:
	Exit Sub

Err_main:
	'note "CutLN_LV: "+str$(err())+" "+error$()
	Resume Res_main
End Sub

'*********************************************


Sub CutaLine

	Dim x				as Float
	Dim y 				as Float
	Dim iFound			as Integer
	Dim i				as Integer
	Dim j				as Integer
	Dim sTable			as String
	Dim iRowid			as Integer
	Dim aTable			as Alias
	Dim aTableObj		as Alias
	Dim lFound			as Logical
	Dim Counter		as Integer
	Dim xyUnits		as String
	Dim CosName		as String
	Dim Map_Win_id 	as Integer
	Dim Phase3			as Integer
	Dim PhaseA			as Integer
	Dim PhaseB			as Integer 
	Dim PhaseC 		As Integer
	Dim LV_Amp			As Integer
	
	OnError goto Err_CutaLine


'*************  Getting window ID *************

	Map_Win_id = FrontWindow()

	If Map_Win_id = 0 Then
		Exit Sub
	End If

'*********************************************** 

	CosName = WindowInfo(Map_Win_Id,WIN_INFO_TABLE)

	Set CoordSys Window Map_Win_id 
	
	x = CommandInfo(CMD_INFO_X)
	y = CommandInfo(CMD_INFO_Y)

	xyunits = MapperInfo(Map_Win_id,MAPPER_INFO_XYUNITS)

	ifound = SearchPoint(Map_Win_Id,x,y)

	If ifound = 0 Then
		lFound = FALSE
	Else
		lFound = FALSE
		For i = 1 to ifound
      		' Get the name of the table containing a "hit".
	      	stable = SearchInfo(i, SEARCH_INFO_TABLE)
   
	      	' Get the row ID number of the object that was a hit.
	      	irowid = SearchInfo(i, SEARCH_INFO_ROW)

	      	If Left$(sTable, 5) = "Lines" Then 
	        		' Fetch the row of the object the user clicked on.
	        		Fetch rec iRowid  From sTable
	        		aTable = sTable + ".LN_ID"
					aTableObj = sTable + ".obj"

				Print "Lines: " + aTable
								
				Call LineGridCut(aTable,TRUE,CosName)

				lFound = TRUE
      		End If 
    		Next
	End If

	If lFound = FALSE Then
		Print "Sorry, no Lines to Cut."
		Print "Make sure the layer Lines is selectable or try again..."


	End If

	Select Sum(Meters.CUR_CONSUMP) from Meters, Line2 where Meters.Obj Intersects Line2.Obj into TotalConsumption

	cKWH = TotalConsumption.COL1

	Select Sum(Line2.LENGTH) from Line2 into TotalLength
	
	totalSPAN = TotalLength.COL1

	Select Count(*) from Meters, Line2 where PHASE_ID = "A" AND Meters.obj Intersects Line2.obj into Count_ThreeP

	phase3 = Count_ThreeP.COL1

	Select Count(*) from Meters, Line2 where PHASE_ID = "R" AND Meters.obj Intersects Line2.obj into A_Phase

	phaseA = A_Phase.COL1

	Select Count(*) from Meters,Line2 where PHASE_ID = "Y" AND Meters.obj Intersects Line2.obj into BPhase

	phaseB = BPhase.COL1

	Select Count(*) from Meters,Line2 where PHASE_ID = "B" AND Meters.obj Intersects Line2.obj into CPhase

	phaseC = CPhase.COL1

	Select Trans.LV_AMP from Trans into LVAmp

	LV_Amp = LVAmp.COL1


	Print "Loss in 1 month = " + cKWH + " KWH = $ " + cKWH * 0.70
	Print "Loss in 1 week = " + cKWH/4 + " KWH = $ " + cKWH/4 * 0.70
	Print "Loss in 1 day = " + cKWH/28 + " KWH = $ " + cKWH/28 * 0.70
	Print "Loss in 1 hour = " + cKWH/28/24 + " KWH = $ " + cKWH/28/24 * 0.70
	Print "Total Length of Lines in Meters = " + totalSPAN + " m"
	Print "Total Customers Connected 3 Phase = " + phase3
	Print "Total Customers Connected A Phase = " + phaseA
	Print "Total Customers Connected B Phase = " + phaseB
	Print "Total Customers Connected C Phase = " + phaseC
	Print "Transformer rated LV Fuse Amps = " + LV_Amp

	Add Map Window Map_Win_id Layer Line2
	Set map redraw on
	Set Map Window Map_Win_id Layer Line2 Editable ON
	Run Menu Command M_QUERY_SELECTALL
	Run Menu Command M_EDIT_CLEAR
	Remove Map Window Map_Win_id Layer Line2
	Close Table Line2

Res_CutaLine:
	Exit Sub

Err_CutaLine:
	'note "CutaLine: "+str$(err())+" "+error$()
	Resume Next

End Sub

'****************************************************************************

Sub LineGridCut(ByVal Polefrom as String, ByVal start as Logical, ByVal CosName as String)

Dim aLN_ID				as Alias
Dim aPole_From		as Alias
Dim aPole_To			as Alias
Dim aObj				as Alias
Dim poleto(1)			as String
Dim i					as Integer
Dim j 					as Integer
Dim LineObj			as Object
Dim SelName			as String
Dim TableName		As String

	OnError goto Err_LineGridCut

	Open Window Message ' open Message window 
	Set Window Message 
	Font ("Arial", 1, 12, BLUE) ' Arial bold...
	Position (0.25, 0.25) ' place in upper left 
	Width 4.0 ' make window 3" wide 
	Height 6.5 ' make window 1" high 

	aLN_ID = "lines.LN_ID"
	aPole_From = "lines.FROM_ID"
	aPole_To = "Lines.NEXT_ID"
	aObj = "Lines.obj"
	
	If start Then
	
		Print "First Pole: " + PoleFrom
		Select * From Lines
			Where LN_ID = Val(Right$(PoleFrom,6))
			If SelectionInfo(SEL_INFO_NROWS) = 0 Then
				Exit Sub
			End if
		SelName = SelectionInfo(SEL_INFO_SELNAME)
		Fetch First From Selection
		If str$(aPole_To) <> "" Then
			LineObj = aObj
			Alter Object LineObj
				Info OBJ_INFO_PEN, MakePen(3,2,RED)
			Insert Into CosName (Obj)
				Values(LineObj)
			If Left$(Str$(aPole_To),2)<> "MT" then 
				Call LineGridCut(aPole_To,False,CosName)
			End if
		End if
		
		Commit Table Selection As vt_Path + "\" + "SimLine.TAB" Interactive

		Close Table SelName
	Else
		Select * From Lines 
			Where FROM_ID = polefrom
		If SelectionInfo(SEL_INFO_NROWS) = 0 Then
			Exit Sub
		End if
		SelName = SelectionInfo(SEL_INFO_SELNAME)
		Fetch First From Selection
		i = 1
  		Do While Not EOT(Selection)
			If str$(aPole_to) <> "" Then
				Print "from: " +  + poleFrom + " To: " + str$(aPole_To)
				LineObj = aObj
				Alter Object LineObj
					Info OBJ_INFO_PEN, MakePen(3,2,RED)
				Insert into CosName (Obj)
					Values(LineObj)
				If left$(str$(aPole_To),2)<>"MT" Then
					ReDim PoleTo(i)
					poleTo(i)=str$(aPole_To)
					i = i + 1

				End if
			End if
		   	Fetch Next From Selection
  		Loop

		Open Table vt_Path + "\" + "SimLine.TAB" Interactive As Line2
		
		Insert Into Line2 ( COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8, COL9, COL10, COL11, COL12, COL13, COL14) 
			Select COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8, COL9, COL10, COL11, COL12, COL13, COL14 From Selection
	
		Close Table SelName
		For j = 1 to i - 1
			Call LineGridCut(PoleTo(j),FALSE,CosName)
		Next
	End if

Res_LineGridCut:

	Exit Sub
	
Err_LineGridCut:

	'note "LineGridCut: "+str$(err())+" "+error$()
	Resume Res_LineGridCut

End Sub

