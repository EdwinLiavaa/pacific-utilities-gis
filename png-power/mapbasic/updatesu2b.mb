'*****************************************************************
'*  Name   : UpdateSU2b
'*  Purpose: Update a post survey xx file that has been processed
'*				and saved in the format xx-yyyymmdda-GPnn-FIN
'*
'*				1. Upshift column names
'*				2. Reset datatypes
'*				3. Populate columns 
'*
'*	See MapBasic Reference Manual for MakeSymbol( shape, color, size )
'*	where shape:
'*	32	solid square
'*	33	solid diamond
'*	34	solid circle
'*	35	solid star
'*	36 solid triangle
'*
'*  Inputs : User defined table
'*  Outputs: Filename with full path, filename, type of object, valid flag
'*  Author : Edwin Liava'a
'*  Date   : 13-Feb-2007
'*  Mods   : 24-Feb-2007
'*           
'*****************************************************************

Include "PPL_Lib.def"
Include "mapbasic.def"
Include "menu.def"

Declare Sub UpdateSU2b (s_filename_with_path As String, s_filename As String,
							s_objtype As String, ivalid As Integer)

Global db_conn_path As String	'	Access
Global rs_path As String	'	MapInfo Raster Layers (BackDrops)
Global vt_Path As String	'	MapInfo Vector Layers
Global db_name As String	'	MIS database

Sub UpdateSU2b (s_filename_with_path As String, s_filename As String,
							s_objtype As String, ivalid As Integer)

OnError Goto Err_Manage

'	+++++++++++++++ declarations +++++++++++++++

	Dim tableOBJ As Alias
	Dim i, icol_count, icol_match, irow, irow_symbol, myfound as Integer
	Dim more As Logical
	Dim myOBJ As Object
	Dim i_col_type As SmallInt
	Dim s_col_name As String
	Dim alter_col_name As String
	Dim mycolname, mycolnamenew as String
	Dim s_col_name_array() As String
'	Dim s_filename As String
'	Dim s_filename_with_path As String
	Dim s_gpsid As String
'	Dim s_objtype As String
	Dim s_result As String
	Dim s_status As String
	Dim	 s_surveyid as String
	Dim s_tablename As String
	Dim newsymbolstyle As Symbol

'	+++++++++++++++ initialise +++++++++++++++

	ivalid = 1

'	+++++++++++++++ open table and map window +++++++++++++++

'	+++++++++++++++ if valid object type set symbol else exit +++++++++++++++

	If s_objtype = "MT" Then
		newsymbolstyle = MakeSymbol(33,CYAN,9)
	ElseIf s_objtype = "ND" Then
		newsymbolstyle = MakeSymbol(34,8421376,9) ' BROWN
	ElseIf s_objtype = "PL" Then
		newsymbolstyle = MakeSymbol(34,GREEN,9)
	ElseIf s_objtype = "TX" Then
		newsymbolstyle = MakeSymbol(36,MAGENTA,9)
	Else
		Note "Invalid object type: " + s_objtype
		ivalid = 0
		Exit Sub
	End if

	Open Table s_filename_with_path as TMP Interactive

	s_tablename = TableInfo(0, TAB_INFO_NAME)

	Print "Tablename Alias: " + s_tablename

'	+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'	+++++++++++++++ update symbols                                    +++++++++++++++
' 	+++++++++++++++ test for missing spatial, meter and customer data +++++++++++++++
' 	+++++++++++++++ and no physical file for name in pic              +++++++++++++++
'	+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	tableOBJ = TMP.obj

	irow_symbol = 1
	Fetch First from s_tablename
	Do While Not EOT(s_tablename)
		myOBJ = tableOBJ
		If Not TMP.obj Then
			Note "ABORT. No spatial data in record: " + irow_symbol
			ivalid = 0
			Exit Sub
		End If
		If s_objtype = "MT" Then
			If TMP.MT_ID_CIS = "" Then
				Note "ABORT. No Meter found in CIS in record: " + irow_symbol
				ivalid = 0
				Exit Sub
			End If
			If TMP.CU_ID_CIS = "" Then
				Note "ABORT. No Customer found in CIS in record: " + irow_symbol
				ivalid = 0
				Exit Sub
			End If
		End If
		If Mid$(TMP.PIC, 9, Len(TMP.PIC)) <> "nopic.jpg" Then
			If FileExists(Left$(s_filename_with_path, Len(s_filename_with_path) - 7 - Len(s_filename)) +
													"pics\" + Mid$(TMP.PIC, 9, Len(TMP.PIC))) = False Then
				Note "ABORT. No physical file for PIC in record: " + irow_symbol
				ivalid = 0
				Exit Sub
			End If
		End If
		Alter Object myOBJ Info OBJ_INFO_SYMBOL, newsymbolstyle
		Update s_tablename Set obj = myOBJ Where RowID = irow_symbol
		Fetch Next From s_tablename
		irow_symbol = irow_symbol + 1
	Loop
	irow_symbol = irow_symbol - 1		'	we exit after row has been incremented

'	+++++++++++++++ get table structure +++++++++++++++

	icol_count = NumCols(s_tablename)

	ReDim s_col_name_array(icol_count)

	Print "Column count: " + icol_count

	For i = 1 to icol_count		
		s_col_name = ColumnInfo(s_tablename, "COL" + str$(i), COL_INFO_NAME)
		i_col_type = ColumnInfo(s_tablename, "COL" + str$(i), COL_INFO_TYPE)
'		Print i + " " + s_col_name + " " + i_col_type
		s_col_name_array(i) = s_col_name
	Next

'	+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'	+++++++++++++++ drop, rename, add, order and modify columns +++++++++++++++
'  	+++++++++++++++ note: cannot drop tables that already exist +++++++++++++++
'  	+++++++++++++++ note: cannot rename tables that do not exist ++++++++++++++
'  	+++++++++++++++ note: cannot add tables that already exist ++++++++++++++++
'  	+++++++++++++++ note: cannot order tables that do not exist +++++++++++++++
'  	+++++++++++++++ note: cannot modify tables that do not exist ++++++++++++++
'	+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	Commit Table TMP ' prerequisite to Alter Table

'	++++++++++++++++++++++++++++++++++++++++++++
' 	+++++++++++++++ COMMON START +++++++++++++++
'	++++++++++++++++++++++++++++++++++++++++++++

'	+++++++++++++++ drop columns +++++++++++++++

'	+++++++++++++++ rename columns +++++++++++++++

'	+++++++++++++++ add columns +++++++++++++++

'	+++++++++++++++ order columns +++++++++++++++

'	+++++++++++++++ modify columns +++++++++++++++

'	++++++++++++++++++++++++++++++++++++++++++++
' 	+++++++++++++++ COMMON END +++++++++++++++++
'	++++++++++++++++++++++++++++++++++++++++++++

'	++++++++++++++++++++++++++++++++++++++++++++
' 	+++++++++++++++ METERS START +++++++++++++++
'	++++++++++++++++++++++++++++++++++++++++++++
	
	If s_objtype = "MT" Then

'	+++++++++++++++ drop columns +++++++++++++++

		mycolname = "PHOTO_ID"
		Call TestColname(mycolname, myfound, s_tablename)
		If myfound = 1 Then
			Alter Table TMP (drop mycolname) Interactive
		End if

		mycolname = "POINT_ID"
		Call TestColname(mycolname, myfound, s_tablename)
		If myfound = 1 Then
			Alter Table TMP (drop mycolname) Interactive
		End if

'	+++++++++++++++ rename columns +++++++++++++++

'	+++++++++++++++ add columns +++++++++++++++

		mycolname = "MT_ID"
		Call TestColname(mycolname, myfound, s_tablename)
		If myfound = 0 Then
			Alter Table TMP (Add mycolname Char(8)) Interactive
		End if

'	+++++++++++++++ order columns +++++++++++++++

		Alter Table TMP (Order
    					MT_ID,
						PIC,
    					MT_ID_SU,
						MT_ID_CIS,
    					CU_ID_SU,
    					CU_ID_CIS,
    					PREPAID,
    					LOC1,
    					LOC2,
						FD_ID,
						TX_ID,
    					PL_ID,
						ND_ID,
						NEXT_ID,
    					PHASE_ID,
						MAKE_ID,
						ACCESS_ID,
						DISCONNECT,
						SEALED,
						LOCKED,
    					PL_FUSE,
    					UG,
    					GPS_DATE,
    					GPS_TIME,
    					GPS_HEIGHT,
    					VERT_PREC,
    					XC,
    					YC,
    					SU_ID,
   						GP_ID,
						COMMENTS
						) Interactive

'	+++++++++++++++ modify columns +++++++++++++++

	End If

'	++++++++++++++++++++++++++++++++++++++++++++
' 	+++++++++++++++ METERS END +++++++++++++++++
'	++++++++++++++++++++++++++++++++++++++++++++

'	++++++++++++++++++++++++++++++++++++++++++++
' 	+++++++++++++++ NODES START +++++++++++++++
'	++++++++++++++++++++++++++++++++++++++++++++
	
	If s_objtype = "ND" Then

'	+++++++++++++++ drop columns +++++++++++++++

		mycolname = "PHOTO_ID"
		Call TestColname(mycolname, myfound, s_tablename)
		If myfound = 1 Then
			Alter Table TMP (drop mycolname) Interactive
		End if

		mycolname = "POINT_ID"
		Call TestColname(mycolname, myfound, s_tablename)
		If myfound = 1 Then
			Alter Table TMP (drop mycolname) Interactive
		End if

'	+++++++++++++++ rename columns +++++++++++++++

'	+++++++++++++++ add columns +++++++++++++++

		mycolname = "ND_ID"
		Call TestColname(mycolname, myfound, s_tablename)
		If myfound = 0 Then
			Alter Table TMP (Add mycolname Char(8)) Interactive
		End if

'	+++++++++++++++ order columns +++++++++++++++

		Alter Table TMP (Order
    					ND_ID,
						PIC,
						HVLV_ID,
						DEPTH,
    					PHASE_ID,
						NEXT_ID,
						FD_ID,
    					GPS_DATE,
    					GPS_TIME,
    					GPS_HEIGHT,
    					VERT_PREC,
    					XC,
    					YC,
    					SU_ID,
   						GP_ID,
						COMMENTS
						) Interactive

'	+++++++++++++++ modify columns +++++++++++++++

	End If

'	++++++++++++++++++++++++++++++++++++++++++++
' 	+++++++++++++++ NODES END +++++++++++++++++
'	++++++++++++++++++++++++++++++++++++++++++++

'	++++++++++++++++++++++++++++++++++++++++++++
' 	+++++++++++++++ POLES START ++++++++++++++++
'	++++++++++++++++++++++++++++++++++++++++++++

	If s_objtype = "PL" Then

'	+++++++++++++++ drop columns +++++++++++++++

		mycolname = "PHOTO_ID"
		Call TestColname(mycolname, myfound, s_tablename)
		If myfound = 1 Then
			Alter Table TMP (drop mycolname) Interactive
		End if

		mycolname = "POINT_ID"
		Call TestColname(mycolname, myfound, s_tablename)
		If myfound = 1 Then
			Alter Table TMP (drop mycolname) Interactive
		End if

'	+++++++++++++++ rename columns +++++++++++++++
	
'	+++++++++++++++ add columns +++++++++++++++
	
'	+++++++++++++++ order columns +++++++++++++++

'	+++++++++++++++ modify columns +++++++++++++++

	End If

'	++++++++++++++++++++++++++++++++++++++++++++
' 	+++++++++++++++ POLES END ++++++++++++++++++
'	++++++++++++++++++++++++++++++++++++++++++++

'	++++++++++++++++++++++++++++++++++++++++++++
' 	+++++++++++++++ TRANSFORMERS START +++++++++
'	++++++++++++++++++++++++++++++++++++++++++++

	If s_objtype = "TX" Then

'	+++++++++++++++ drop columns +++++++++++++++

		mycolname = "PHOTO_ID"
		Call TestColname(mycolname, myfound, s_tablename)
		If myfound = 1 Then
			Alter Table TMP (drop mycolname) Interactive
		End if

		mycolname = "POINT_ID"
		Call TestColname(mycolname, myfound, s_tablename)
		If myfound = 1 Then
			Alter Table TMP (drop mycolname) Interactive
		End if

'	+++++++++++++++ rename columns +++++++++++++++

'	+++++++++++++++ add columns +++++++++++++++

'	+++++++++++++++ order columns +++++++++++++++

'	+++++++++++++++ modify columns +++++++++++++++

	End If

'	++++++++++++++++++++++++++++++++++++++++++++
' 	+++++++++++++++ TRANSFORMERS END +++++++++++
'	++++++++++++++++++++++++++++++++++++++++++++

'	+++++++++++++++ upshift column names +++++++++++++++

	icol_count = NumCols(s_tablename)
	For i = 1 to icol_count		
		Alter Table TMP (Rename 
							ColumnInfo(s_tablename, "COL" + str$(i), COL_INFO_NAME)
							UCase$(ColumnInfo(s_tablename, "COL" + str$(i), COL_INFO_NAME))) Interactive
	Next

'	+++++++++++++++ save and close tables +++++++++++++++

	s_filename_with_path = Left$(s_filename_with_path, Len(s_filename_with_path) - 7) + "INP.TAB"

	s_filename = Mid$(s_filename, 1, 18) + "INP"

	Commit Table TMP As s_filename

	Drop Table TMP

'	+++++++++++++++ cleanup +++++++++++++++

	Print "Finished: " + s_filename + " saved"
'	Note "Finished: " + s_filename + " saved"

UpdateSU2b:
	Exit Sub
	' The Exit Sub prevents the program from
	' unintentionally executing the error handlers
Err_Manage:
	Note "Error: " + str$(err()) + ", " + error$()
	Resume UpdateSU2b
End Sub