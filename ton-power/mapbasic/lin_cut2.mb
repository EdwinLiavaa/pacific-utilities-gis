'********************************************************
'*                                                      *
'*     LinCut2.MBO                Edwin, 25.08.98      *
'*                                                      *
'*  This program displays all lines without electricity *
'*  when there is a power disruption at a selected point*
'*                                                      *
'* ++++++++++++++++++++++++++++++++++++++++++++++++++++ *
'* required files:                                      *
'*                MAPBASIC.DEF                          *
'*			MENU.DEF                              *
'* ++++++++++++++++++++++++++++++++++++++++++++++++++++ *
'* required tables:                                     *
'*                  - Lines.tab	                    *
'*                  -                                   *
'********************************************************

	include "C:\Program files\MapInfo\MapBasic\MAPBASIC.DEF"	'################ change!
	include "C:\Program files\MAPINFO\MAPBASIC\MENU.DEF"		'################ change!
	include "C:\Program files\MAPINFO\MAPBASIC\ICONS.DEF"		'################ change!

	Declare Sub CutaLine
	Declare sub Lin_Cut2
	Declare Sub LineGridCut(ByVal Polefrom as String, 
	ByVal start as Logical, ByVal Cosname as String)

	Global passw as String 
	Global MapPath as string
	Global CadaPath as String



'+++++++++++++++++++++++++++++++++++++++++++++++++++++++*

Sub Lin_Cut2

	Dim MapName		As String
	Dim Map_Win_id 	as Integer

' ++++++++++++++++++++++++++ close some toolbars ++++++++++++++++++++

	Create ButtonPad "Data Centre" As	
			ToolButton
				Icon MI_ICON_CUT
				Cursor MI_CURSOR_CROSSHAIR
				DrawMode DM_CUSTOM_POINT
				ID 23	
				HelpMsg "Cut a Line and show the cutted grid\nCut a Line"
				Calling CutaLine
			Title " "
			width 8
			Float
			Show

	Alter ButtonPad "Drawing" Hide
	Alter ButtonPad "Main" Show Fixed
	Alter ButtonPad "ODBC" Hide


' ++++++++++++++++++++++++++ close and open map layers ++++++++++++++

	
	MapName = MapPath +"LINES.TAB"	'################### Path has to be changed

	Close All
	
	Open Table MapName As "Lines" password passw
	
	Map From Lines Max

	Mapname = Cadapath + "n_cad.tab"
	open table MapName as n_cad interactive

	add map layer n_cad


'+++++++++++++++++++++++++++  Getting window ID +++++++++++++++++++++

	Map_Win_Id = FrontWindow()
	If Map_Win_id = 0 Then
		Exit Sub
	End If

'+++++++++++++++++++++++++++ changing map +++++++++++++++++++++++++++

	Set Map redraw off
	Set Map Distance Units "m" Area Units "hectare"
	Set Map Zoom Entire Layer "Lines" 
	MapName = MapPath +"POLES.TAB" '################### Path has to be changed
	Open Table MapName As "Poles" password "MakaVeli"
	Add Map Window Map_Win_Id Layer "Poles"
	Set Map Layer "Poles"  Display Global Global Symbol (34,65280,8) 
	Set Map Layer "Lines"  Display Global
	set Window Map_Win_Id Max
	Set map redraw on

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 




	OnError goto Err_Lin_Cut2

	Run Menu Command ID 23

Res_Lin_Cut2:
	Exit Sub

Err_Lin_Cut2:
	note "Lin_Cut2: "+str$(err())+" "+error$()
	Resume Res_Lin_Cut2

End Sub

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++*

Sub CutaLine

	Dim x			as Float
	Dim y 		as Float
	Dim iFound		as Integer
	Dim i			as Integer
	Dim j			as Integer
	Dim sTable		as String
	Dim iRowid		as Integer
	Dim aTable		as Alias
	Dim aTableObj	as Alias
	Dim lFound		as Logical
	Dim Counter		as Integer
	Dim xyUnits		as String
	Dim CosName		as String
	Dim Map_Win_id 	as Integer
	
	OnError goto Err_CutaLine


'+++++++++++++++++++++++++++  Getting window ID +++++++++++++++++++++

	Map_Win_id = FrontWindow()


	If Map_Win_id = 0 Then
		Exit Sub
	End If

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

	



	CosName=WindowInfo(Map_Win_Id,WIN_INFO_TABLE)

	Set CoordSys Window Map_Win_id 
	
	x=CommandInfo(CMD_INFO_X)
	y=CommandInfo(CMD_INFO_Y)

	xyunits=MapperInfo(Map_Win_id,MAPPER_INFO_XYUNITS)

	Print Chr$(12)
	ifound=SearchPoint(Map_Win_Id,x,y)
	
	if ifound=0 then
		lFound=FALSE
	Else
		lFound=FALSE
		For i = 1 to ifound
      		' Get the name of the table containing a "hit".
	      	stable = SearchInfo(i, SEARCH_INFO_TABLE)
   
	      	' Get the row ID number of the object that was a hit.
	      	irowid = SearchInfo(i, SEARCH_INFO_ROW)

	      	If Left$(sTable, 5) = "Lines" Then 
	        		' Fetch the row of the object the user clicked on.
	        		Fetch rec iRowid  From sTable
	        		aTable = sTable + ".SPAN_ID"
				aTableObj=sTable + ".obj"


				Print "Lines:"+aTable
				Call LineGridCut(aTable,TRUE,CosName)

				lFound=TRUE
      		End If 
    		Next
	End If

	If lFound=FALSE Then
		Print "Sorry, no Lines to Cut."
		Print "Make sure the layer Lines is selectable or try again..."
	End If



Res_CutaLine:
	Exit Sub

Err_CutaLine:
	note "CutaLine: "+str$(err())+" "+error$()
	Resume Next

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++

	End Sub




'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Sub LineGridCut(ByVal Polefrom as String, ByVal start as Logical, ByVal CosName as String)

Dim aSpan_ID		as Alias
Dim aPole_From		as Alias
Dim aPole_To		as Alias
Dim aObj			as Alias
Dim poleto(1)		as String
Dim i				as Integer
Dim j 			as Integer
Dim LineObj			as Object
Dim SelName			as String

	OnError goto Err_LineGridCut

	aSpan_ID="lines.SPAN_ID"
	aPole_From="lines.POLE_FROM"
	aPole_To="Lines.POLE_TO"
	aObj="Lines.obj"
	

	if start then
		print "First Pole:"+PoleFrom
		Select * from Lines
			where SPAN_ID=val(PoleFrom)
		if SelectionInfo(SEL_INFO_NROWS)=0 then
			Exit Sub
		end if
		SelName=SelectionInfo(SEL_INFO_SELNAME)
		Fetch First from Selection
		if str$(aPole_To)<>"" then
			LineObj=aObj
			Alter Object LineObj
				Info OBJ_INFO_PEN, MakePen(3,2,RED)
			insert into CosName (Obj)
				Values(LineObj)
			if left$(str$(aPole_To),1)<>"C" then 
				Call LineGridCut(aPole_To,False,CosName)
			end if
		end if

		Close Table SelName
	else
		Select * from lines
			where POLE_FROM=polefrom
		if SelectionInfo(SEL_INFO_NROWS)=0 then
			Exit Sub
		end if
		SelName=SelectionInfo(SEL_INFO_SELNAME)
		Fetch First From selection 
		i=1
  		Do While Not EOT(Selection)
			if str$(aPole_to)<>"" then
				Print "from Pole:"+poleFrom+" To Pole:"+str$(aPole_To)
				LineObj=aObj
				Alter Object LineObj
					Info OBJ_INFO_PEN, MakePen(3,2,RED)

				insert into CosName (Obj)
					Values(LineObj)
				if left$(str$(aPole_To),1)<>"C" then
					ReDim PoleTo(i)
					poleTo(i)=str$(aPole_To)
					i=i+1
				end if	
			end if
		    	Fetch Next From Selection
  		Loop 
		Close Table SelName
		for j=1 to i-1
			Call LineGridCut(PoleTo(j),FALSE,CosName)
		next
		
	end if


Res_LineGridCut:
	Exit Sub

Err_LineGridCut:
	note "LineGridCut: "+str$(err())+" "+error$()
	Resume Res_LineGridCut
End Sub

